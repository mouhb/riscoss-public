<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>Blog</web>
  <name>CategoriesCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1429197412000</creationDate>
  <parent>Blog.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1373018322000</date>
  <contentUpdateDate>1373017694000</contentUpdateDate>
  <version>1.1</version>
  <title>Macros for the Blog Categories</title>
  <comment>Imported from XAR</comment>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Blog.BlogCode"/}}

{{velocity output="false"}}
##
##
##
#**
 * Retrieves the list of blog entries from a given category. Entries belonging to subcategories
 * are not returned.
 * 
 * @param category The name of the category (XDocument full name, for example 'MyBlog.Fishing').
 * @param articles Return parameter, where the list of entries is placed.
 * @param total Return parameter, where the total number of entries belonging to this category is
 *        placed. Useful for a paginated view.
 *###
#macro(getEntriesForCategory $category $entries $totalEntries)
  #set ($entries = $NULL)
  #set ($totalEntries = $NULL)
  #if ("$!{blogCategoryEntriesCache.containsKey($!{category})}" == 'true')
    #setVariable ("$entries" $blogCategoryEntriesCache.get($!{category}).get(0))
    #setVariable ("$totalEntries" $blogCategoryEntriesCache.get($!{category}).get(1))
    #preparePagedViewParams ($totalEntries 10)
  #else
    #getCategoriesHierarchy ('' $tree)
    #set ($subcategories = [])
    #getSubcategories ($tree $category $subcategories)
    #set ($categories = [${category}])
    #set ($discard = $categories.addAll(${subcategories}))
    #set ($parameters = '?')
    #foreach ($subcategory in $subcategories)
      #set ($parameters = $parameters.concat(', ?'))
    #end
    #getBlogEntriesBaseQuery ($query)
    #set ($query = ", DBStringListProperty as categories join categories.list as category${query} and obj.id = categories.id.id and categories.id.name='category' and category in (${parameters})")
    #set ($totalResult = $services.query.hql($query).bindValues($categories).count())
    #preparePagedViewParams ($totalResult 10)
    #set ($result = $services.query.hql("${query} order by publishDate.value desc").setLimit($itemsPerPage).setOffset($startAt).bindValues($categories).execute())
    #if ("$!{blogCategoryEntriesCache.containsKey($!{category})}" == '')
      #set ($blogCategoryEntriesCache = {})
    #end
    #set ($discard = $blogCategoryEntriesCache.put("$!{category}", [$result, $totalResult]))
    #setVariable ("$entries" $result)
    #setVariable ("$totalEntries" $totalResult)
  #end
#end
#macro(getSubcategories $tree $category $subcategories)
  #if(!$subcategories.contains($category))
    #foreach($subcategory in $tree.get($category))
      #set($discard = $subcategories.add($subcategory))
      #getSubcategories($tree $subcategory $subcategories)
    #end
  #end
#end
##
##
##
#**
 * Builds a tree of categories, respecting the parent&lt;->subcategory relation. Each node holds the
 * full name of the category's document. The root of the tree is 'Blog.Categories'.
 * 
 * @param space The space where to search for categories. If this parameter is an emptry string or
 *        null, all the categories in the wiki are returned.
 * @param tree Return parameter, HashMap&lt;String, List&lt;String>> structure holding the categories
 *        hierarchy, where the key is the name of a category, and the value contains the names of
 *        all its subcategories. To obtain the full hierarchy, start with the key 'Blog.Categories'.
 *###
#macro(getCategoriesHierarchy $space $tree)
  #set ($tree = $NULL)
  #if ("$!{blogCategoriesHierarchyCache.containsKey($!{space})}" == 'true')
    #setVariable ("$tree" $blogCategoriesHierarchyCache.get($!{space}))
  #else
    #set ($result = {})
    #set($query = ', BaseObject obj where ')
    #if("$!space" != '')
      #set($query = "${query}doc.space = '${space}' and ")
    #end
    #set($query = "${query}obj.name = doc.fullName and obj.className = '${blogCategoryClassname}' order by doc.name")
    #foreach($category in $services.query.hql($query).execute())
      #set($categoryDoc = $xwiki.getDocument($category))
      #set($categoryParent = "$!categoryDoc.parent")
      #if($categoryParent == '')
        #set($categoryParent = $defaultCategoryParent)
      #end
      #if(!$result.containsKey($categoryParent))
        #set($discard = $result.put($categoryParent, []))
      #end
      #set($discard = $result.get($categoryParent).add($category))
    #end
    #if ("$!{blogCategoriesHierarchyCache.containsKey($!{space})}" == '')
      #set ($blogCategoriesHierarchyCache = {})
    #end
    #set ($discard = $blogCategoriesHierarchyCache.put("$!{space}", $result))
    #setVariable ("$tree" $result)
  #end
#end
##
##
##
#**
 * Displays the category hierarchy held in the &lt;tt>tree&lt;/tt> parameter.
 * 
 * @param tree The category hierarchy, a HashMap&lt;String, List&lt;String>> structure, where the key
 *        is the name of a category, and the value contains the names of all its subcategories.
 * @param displayMethod Selects how to display the category tree. Possible values are:
 *        &lt;ul>
 *        &lt;li>&lt;em>"simple"&lt;/em>: tree with links to the category pages.&lt;/li>
 *        &lt;li>&lt;em>"selectable"&lt;/em>: each category name in the tree is preceded by a checkbox.&lt;/li>
 *        &lt;li>&lt;em>"option"&lt;/em>: wraps each category name in an &amp;lt;option&amp;gt; element, to be used
 *          in a select box.&lt;/li>
 *        &lt;li>&lt;em>"editable"&lt;/em>: displays links to delete and edit each category, if the rights
 *          allow such actions.&lt;/li>
 *        &lt;/ul>
 *        For any other value, the default ("simple") is considered.
 *###
#macro(displayCategoriesHierarchy $tree $displayMethod)
  #set($processedCategories = [])
  #displayCategoriesHierarchyRecursive($tree $defaultCategoryParent 1 $displayMethod)
#end
##
##
##
#**
 * Displays recursively the category hierarchy held in the &lt;tt>tree&lt;/tt> parameter, starting at
 * the node indicated by the &lt;tt>root&lt;/tt> parameter, which is on the &lt;tt>level&lt;/tt>th level in
 * the tree.
 * 
 * @param tree The category hierarchy HashMap&lt;String, List&lt;String>> structure, where the key
 *        is the name of a category, and the value contains the names of all its subcategories.
 * @param root The full name of the document containing the category that is to be considered the
 *        root of the displayed subtree.
 * @param level The current depth of the tree, used for proper indentation.
 * @param displayMethod Selects how to display the category tree. Possible values are:
 *        &lt;ul>
 *        &lt;li>&lt;em>"simple"&lt;/em>: tree with links to the category pages.&lt;/li>
 *        &lt;li>&lt;em>"selectable"&lt;/em>: each category name in the tree is preceded by a checkbox.&lt;/li>
 *        &lt;li>&lt;em>"option"&lt;/em>: wraps each category name in an &amp;lt;option&amp;gt; element, to be used
 *          in a select box.&lt;/li>
 *        &lt;li>&lt;em>"editable"&lt;/em>: displays links to delete and edit each category, if the rights
 *          allow such actions.&lt;/li>
 *        &lt;/ul>
 *        For any other value, the default ("simple") is considered.
 *###
#macro(displayCategoriesHierarchyRecursive $tree $root $level $displayMethod)
  #if(!$processedCategories)
    #set($processedCategories = [])
  #end
  #foreach($item in $tree.get($root))
    #if(!$processedCategories.contains($item))
      #set($discard = $processedCategories.add($item))
      #displayCategory($item $level $displayMethod)
      #displayCategoriesHierarchyRecursive($tree $item $mathtool.add($level, 1) $displayMethod)
    #end
  #end
  #if($displayMethod == "selectable")
    &lt;input type="hidden" name="${blogPostClassname}_$!{entryObj.number}_category" value="" />
  #end
#end
##
##
##
#**
 * Displays a category as part of a category hierarchy.
 * 
 * @param name The full name of the document containing the category to be displayed.
 * @param level The depth where this category is in the tree, used for proper indentation.
 * @param displayMethod Selects how to display the category tree. Possible values are:
 *        &lt;ul>
 *        &lt;li>&lt;em>"simple"&lt;/em>: tree with links to the category pages.&lt;/li>
 *        &lt;li>&lt;em>"selectable"&lt;/em>: each category name in the tree is preceded by a checkbox.&lt;/li>
 *        &lt;li>&lt;em>"option"&lt;/em>: wraps each category name in an &amp;lt;option&amp;gt; element, to be used
 *          in a select box.&lt;/li>
 *        &lt;li>&lt;em>"editable"&lt;/em>: displays links to delete and edit each category, if the rights
 *          allow such actions.&lt;/li>
 *        &lt;/ul>
 *        For any other value, the default ("simple") is considered.
 *###
#macro(displayCategory $name $level $displayMethod)
  #if("$!displayMethod" == "option")
    #displayOptionCategory($name $level)
  #elseif("$!displayMethod" == "selectable")
    #displaySelectableCategory($name $level)
  #elseif("$!displayMethod" == "editable")
    #displayEditableCategory($name $level)
  #else
    #displaySimpleCategory($name $level)
  #end
#end
##
##
##
#**
 * Displays a category as part of a category hierarchy, preceded by a checkbox that allows choosing
 * this category for a blog entry.
 * 
 * @param name The full name of the document containing the category to be displayed.
 * @param level The depth where this category is in the tree, used for proper indentation.
 *###
#macro(displaySelectableCategory $name $level)
  #set($categoryDoc = $xwiki.getDocument($name))
  #set($addCategURL = $doc.getURL('view', $escapetool.url({
    'xaction': 'showAddCategory',
    'parentCategory' : $name
  })))
  #set($addEntryParams = false)
  #if($isBlogPost)
    #set($entry = $xwiki.getDocument($doc.fullName))
    #set($entryObj = $isBlogPost)
    #set($addEntryParams = true)
  #elseif("$!request.entry" != '' &amp;&amp; "$!request.entryObjNb" != '')
    #set($entry = $xwiki.getDocument($request.entry))
    #set($entryObj = $entry.getObject($blogPostClassname, $mathtool.toInteger($request.entryObjNb)))
    #set($addEntryParams = true)
  #end
  #if($isBlogPost || $addEntryParams)
    ## parentCategory must be the last param
    #set($addCategURL = $doc.getURL('view', $escapetool.url({
      'xaction': 'showAddCategory',
      'entry': $entry.fullName,
      'entryObjNb': $entryObj.number,
      'parentCategory': $name
    })))
  #end
  #foreach($i in [1..$level])*#end ##
&lt;span class="blog-category-level">&lt;span class="blog-category">##
&lt;label id='blog_category_${escapetool.xml($name)}' title="#getCategoryDescription($categoryDoc)">&lt;input name="${blogPostClassname}_$!{entryObj.number}_category" value="${escapetool.xml($name)}" type="checkbox"#if($entryObj.getProperty('category').getValue().contains($name)) checked="checked" #end/> #getCategoryName($categoryDoc)&lt;/label>##
&lt;/span>##
#if($xwiki.hasAccessLevel('edit', $xcontext.user, $doc.fullName) &amp;&amp; ("$!{request.xaction}" != "showAddCategory" || "$!{request.parentCategory}" != $name))
&lt;span class="blog-category-tools">##
&lt;a href="$escapetool.xml($addCategURL)" class="tool add-subcategory">#toolImage('chart_organisation_add' 'Add a subcategory ')&lt;/a>##
&lt;/span>##
#end
&lt;/span>
#end
##
##
##
#**
 * Displays a form for creating a new category. If a parentCategory parameter is present in the 
 * query string, the parent category is set accordingly. Otherwise, the form provides a selection
 * control for choosing the parent category among existing categories.
 *###
## DO NOT CHANGE INDENTATION
#macro(addCategoryForm) #set($addCategURL = $doc.getURL()) #if("$!request.entry" != '') #set($addCategURL = "${addCategURL}?entry=$escapetool.url($request.entry)&amp;amp;entryObjNb=$escapetool.url($!request.entryObjNb)")#end&lt;form action="${addCategURL}" method="post" class="category-add-form">&lt;div class='create-category'> &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /> &lt;input type="hidden" name="xaction" value="create"/> &lt;label>$services.localization.render('xe.blog.categories.new')&lt;br/> &lt;input type="text" name="newCategoryName" class="category-name-input" />&lt;/label>&lt;br/>#if("$!{request.parentCategory}" == "")&lt;label>#* $services.localization.render('xe.blog.categories.parent')*# Subcategory of:&lt;br/> &lt;select name="newCategoryParent" id="blog_category_selectBox" class="category-add-input"> &lt;option value="${defaultCategoryParent}" selected="selected">None&lt;/option> $!processedCategories.clear() #displayCategoriesHierarchy($tree 'option') &lt;/select> &lt;br/>&lt;/label>#else&lt;input type="hidden" name="newCategoryParent" value="${escapetool.xml($request.parentCategory)}"/>#end&lt;span class="buttonwrapper">&lt;input class="button" type="submit" value="Add" />&lt;/span> &lt;a href="$doc.getURL()">Cancel&lt;/a> &lt;/div>&lt;/form> #end
##
##
##
#**
 * Displays a form for renaming a category.
 *###
## DO NOT CHANGE INDENTATION
#macro(renameCategoryForm)##
&lt;form action="$doc.getURL()" method="post" class="category-rename-form">&lt;div class='rename-category'>##
&lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
&lt;input type="hidden" name="xaction" value="rename"/>##
&lt;input type="hidden" name="category" value="${escapetool.xml($request.category)}"/>##
&lt;label>$services.localization.render('xe.blog.categories.newName')&lt;br/> &lt;input type="text" name="newCategoryName" class="category-name-input" />&lt;/label>&lt;br/>##
&lt;span class="buttonwrapper">&lt;input class="button" type="submit" value="Rename" />&lt;/span> ##
&lt;a href="$doc.getURL()">Cancel&lt;/a>##
&lt;/div>&lt;/form>##
#end
##
##
##
#**
 * Displays a category as part of a category hierarchy, followed by links for editing and deleting
 * this category, if the current user has the rights to perform these actions.
 * 
 * @param name The full name of the document containing the category to be displayed.
 * @param level The depth where this category is in the tree, used for proper indentation.
 *###
## DO NOT CHANGE INDENTATION
#macro(displayEditableCategory $name $level)
  #getEntriesForCategory($name $discard $totalEntries)
  #set($nameUrl = $escapetool.url($name))
  #foreach($i in [1..$level])*#end ##
&lt;span class="blog-category-level">&lt;span class="blog-category">##
&lt;a href="$xwiki.getURL('Blog.CategoryRss', 'view', "xpage=plain&amp;amp;category=$nameUrl")" title="RSS">&lt;img class="icon icon-manage" src="$xwiki.getSkinFile('icons/xwiki/rss-medium.png')" alt="[RSS]"/>&lt;/a>##
[[#getCategoryName($xwiki.getDocument($name)) (% class="itemCount" %)($totalEntries)(%%)>>${name}]]&lt;/span> ##
&lt;span class="blog-category-tools">##
#if($xwiki.hasAccessLevel('delete', $xcontext.user, $name) &amp;&amp; ("$!{request.xaction}" != 'showRenameCategory' || "$!{request.category}" != $name))&lt;a href="$xwiki.getURL('Blog.ManageCategories', 'view', "xaction=showRenameCategory&amp;amp;category=$nameUrl")" class="tool rename">#toolImage('pencil' 'Rename ')&lt;/a>#end ##
#if($xwiki.hasAccessLevel('edit', $xcontext.user, $doc.fullName) &amp;&amp; ("$!{request.xaction}" != "showAddCategory" || "$!{request.parentCategory}" != $name))&lt;a href="$xwiki.getURL('Blog.ManageCategories', 'view', "xaction=showAddCategory&amp;amp;parentCategory=$nameUrl")" class="tool add-subcategory">#toolImage('chart_organisation_add' 'Add a subcategory ')&lt;/a> #end ##
#if($xwiki.hasAccessLevel('delete', $xcontext.user, $name)) &lt;a href="$xwiki.getURL('Blog.ManageCategories', 'view', "xaction=delete&amp;amp;category=$nameUrl&amp;amp;form_token=$!{services.csrf.getToken()}")" class="tool delete">#toolImage('cross' 'Delete ')&lt;/a>#end ##
&lt;/span>##
#if($xwiki.hasAccessLevel('edit', $xcontext.user, $doc.fullName) &amp;&amp; "$!{request.xaction}" == "showRenameCategory" &amp;&amp; "$!{request.category}" == $name) #renameCategoryForm() #end##
#if($xwiki.hasAccessLevel('edit', $xcontext.user, $doc.fullName) &amp;&amp; "$!{request.xaction}" == "showAddCategory" &amp;&amp; "$!{request.parentCategory}" == $name) #addCategoryForm() #end##
&lt;/span>
#end
##
##
##
#**
 * Displays a category as part of a category hierarchy, wrapped in an &amp;lt;option&amp;gt; element, to
 *          be used in a select box.
 * 
 * @param name The full name of the document containing the category to be displayed.
 * @param level The depth where this category is in the tree, used for proper indentation.
 *###
#macro(displayOptionCategory $name $level)
  &lt;option id="blog_category_${escapetool.xml($name)}_option" value="${escapetool.xml($name)}">#if($level > 1)#foreach($i in [2..$level])&amp;nbsp;&amp;nbsp;#end#end#getCategoryName($xwiki.getDocument($name))&lt;/option>
#end
##
##
##
#**
 * Displays a category as part of a category hierarchy, wrapped in a link.
 * 
 * @param name The full name of the document containing the category to be displayed.
 * @param level The depth where this category is in the tree, used for proper indentation.
 *###
#macro(displaySimpleCategory $name $level)
  #getEntriesForCategory($name $discard $totalEntries)
  #set($nameUrl = $escapetool.url($name))
  #foreach($i in [1..$level])*#end &lt;span class="blog-category-level">&lt;a href="$xwiki.getURL('Blog.CategoryRss', 'view', "xpage=plain&amp;amp;category=$nameUrl")" title="RSS">#toolImage('bullet_feed', '[RSS]')&lt;/a> &lt;a href="$xwiki.getURL($name)">#getCategoryName($xwiki.getDocument($name))&lt;/a> &lt;span class="itemCount"> ($totalEntries)&lt;/span>&lt;/span>
#end
##
##
##
#**
 * Prints the name of a category, indicated by its document.
 * The result is XML-escaped
 * 
 * @param categoryDoc The document containing the category to be displayed.
 *###
#macro(getCategoryName $categoryDoc)
## Don't indent!
#set($result = "$!categoryDoc.getObject(${blogCategoryClassname}).getProperty('name').value.trim()")##
#if($result == '')
#set($result = $categoryDoc.name)
#end
$escapetool.xml($result)##
#end
##
##
##
#**
 * Prints the description of a category, indicated by its document.
 * The result is XML-escaped
 * 
 * @param categoryDoc The document containing the category to be displayed.
 *###
#macro(getCategoryDescription $categoryDoc)
## Don't indent!
$escapetool.xml($!categoryDoc.getObject(${blogCategoryClassname}).getProperty('description').value.trim())##
#end
##
##
##
#**
 * Generates a form for creating a new category. The form allows to enter the name of the new
 * category, and select a parent category from the existing ones.
 * 
 * @param tree The category hierarchy, a HashMap&lt;String, List&lt;String>> structure, where the key
 *        is the name of a category, and the value contains the names of all its subcategories.
 * @todo When javascript is disabled, a link to "Manage categories" should be displayed instead.
 *       This "form" should be created from javascript.
 *###
#macro(showCreateCategoryBoxWithForm $tree)
  &lt;form action="" method="post">
  #showCreateCategoryBox($tree)
  &lt;/form>
#end
#**
 * Generates a box for creating a new category. This allows to enter the name of the new
 * category, and select a parent category from the existing ones. Note that this does not create
 * a HTML form element, but requires one to be defined already as its ancestor.
 * 
 * @param tree The category hierarchy HashMap&lt;String, List&lt;String>> structure, where the key
 *        is the name of a category, and the value contains the names of all its subcategories.
 * @todo When javascript is disabled, a link to "Manage categories" should be displayed instead.
 *       This "form" should be created from javascript.
 *###
#macro(showCreateCategoryBox $tree)
  &lt;div class='create-category'>
    &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
    &lt;input type="hidden" name="xaction" value="create"/>
    &lt;label>$services.localization.render('xe.blog.categories.new') &lt;input type="text" name="newCategoryName" />&lt;/label>
    &lt;label>$services.localization.render('xe.blog.categories.parent')
      &lt;select name="newCategoryParent" id="blog_category_selectBox">
        &lt;option value="${defaultCategoryParent}" selected="selected">None&lt;/option>
        $!processedCategories.clear()##
        #displayCategoriesHierarchy($tree 'option')
      &lt;/select>
    &lt;/label>
    &lt;span class="buttonwrapper">&lt;input class="button" type="button" value="Add" id="blog_AddCategoryButton" />&lt;/span>
  &lt;/div>
#end
##
##
##
#macro(displayCategoryManagementTree $space $displayType)
&lt;div class="blog-categories-list">
  #getCategoriesHierarchy("$!{space}" $tree)
  #displayCategoriesHierarchy($tree $displayType)
  #if($xwiki.hasAccessLevel('edit', $xcontext.user, $doc.fullName))
    #set($addCategURL = $doc.getURL('view', $escapetool.url({
      'xaction' : 'showAddCategory',
      'parentCategory' : ''
    })))
    #if($isBlogPost || ("$!request.entry" != '' &amp;&amp; "$!request.entryObjNb" != ''))
      #set($entryParam = $!doc.fullName)
      #set($entryObjNbParam = $!entryObj.number)
      #if(!$isBlogPost)
        #set($entryParam = $!request.entry)
        #set($entryObjNbParam = $!request.entryObjNb)
      #end
      #set($addCategURL = $doc.getURL('view', $escapetool.url({
        'xaction' : 'showAddCategory',
        'parentCategory' : '',
        'entry' : $entryParam,
        'entryObjNb' : $entryObjNbParam
      })))
    #end
    * &lt;span class="blog-add-category-label">&lt;a href="$escapetool.xml($addCategURL)">$services.localization.render('xe.blog.categories.addcategory')&lt;/a>&lt;/span>
     #if("$!{request.xaction}" == "showAddCategory" &amp;&amp; "$!{request.parentCategory}" == "") #addCategoryForm() #end
  #end


&lt;/div>
#end
##
##
##
#**
 * Deletes a category, moving all the subcategories to its parent and removing this category from
 * all existing blog entries.
 * 
 * @param category The full name of the document containing the category to be deleted.
 *###
#macro(deleteCategory $category)
  #set($categoryDoc = $xwiki.getDocument($category))
  #set($categoryParent = "$!categoryDoc.parent")
  #if($categoryParent == '')
    #set($categoryParent = "{$defaultCategoryParent}"))
  #end
  #set($parameterValues = ["$!{category}"])
  #set($query = ', BaseObject obj where ')
  #if($space != '')
    #set($query = "${query}doc.space = '${space}' and ")
  #end
  #set($query = "${query}obj.name = doc.fullName and obj.className = '${blogCategoryClassname}' and doc.fullName &lt;&gt; 'Blog.CategoryTemplate' and doc.parent = ? order by doc.name")
  
  #foreach($item in $services.query.hql($query).bindValues($parameterValues).execute())
    #if($xwiki.hasAccessLevel('edit', $xcontext.user, $item) &amp;&amp; $!{services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
      #set($subcategoryDoc = $xwiki.getDocument($item))
      $subcategoryDoc.setParent($categoryParent)
      $subcategoryDoc.save($services.localization.render('xe.blog.manageCategories.comment.updatedParent'), true)
    #end
  #end
  #set($query = ', BaseObject obj, DBStringListProperty categories join categories.list as category where ')
  #if($space != '')
    #set($query = "${query}doc.space = '${space}' and ")
  #end
  #set($query = "${query}obj.name = doc.fullName and obj.className = '${blogPostClassname}' and doc.fullName &lt;&gt; 'Blog.BlogPostTemplate' and categories.id.id = obj.id and categories.id.name = 'category' and category = ? order by doc.name")
  #foreach($item in $services.query.hql($query).bindValues($parameterValues).execute())
    #if($xwiki.hasAccessLevel('edit', $xcontext.user, $item) &amp;&amp; $!{services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
      #set($blogEntryDoc = $xwiki.getDocument($item))
      #set($discard = $blogEntryDoc.getObject(${blogPostClassname}).getProperty('category').value.remove($category))
      $blogEntryDoc.save($services.localization.render('xe.blog.manageCategories.comment.removedDeletedCategory'), true)
    #end
  #end
  $categoryDoc.delete()
#end
##
##
##
#**
 * Renames a category, updating all the subcategories and all existing blog entries.
 * 
 * @param category The full name of the document containing the category to be renamed.
 * @param newCategoryName The new name of the category.
 *###
#macro(renameCategory $category $newCategoryName)
  #set($categoryDoc = $xwiki.getDocument($category))
  #set($newCategoryDoc = $xwiki.getDocument($newCategoryName))
  #set($parameterValues = ["$!{category}"])
  #set($query = ', BaseObject obj where ')
  #set($query = "${query}obj.name = doc.fullName and obj.className = '${blogCategoryClassname}' and doc.fullName &lt;&gt; 'Blog.CategoryTemplate' and doc.parent = ? order by doc.name")
  #foreach($item in $services.query.hql($query).bindValues($parameterValues).execute())
    #if($xwiki.hasAccessLevel('edit', $xcontext.user, $item) &amp;&amp; $!{services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
      #set($subcategoryDoc = $xwiki.getDocument($item))
      $subcategoryDoc.setParent($newCategoryDoc.fullName)
      $subcategoryDoc.save($services.localization.render('xe.blog.manageCategories.comment.updatedParent'), true)
    #end
  #end
  #set($query = ', BaseObject obj, DBStringListProperty categories join categories.list as category where ')
  #set($query = "${query}obj.name = doc.fullName and obj.className = '${blogPostClassname}' and doc.fullName &lt;&gt; 'Blog.BlogPostTemplate' and categories.id.id = obj.id and categories.id.name = 'category' and category = ? order by doc.name")
  #foreach($item in $services.query.hql($query).bindValues($parameterValues).execute())
    #if($xwiki.hasAccessLevel('edit', $xcontext.user, $item) &amp;&amp; $!{services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
      #set($blogEntryDoc = $xwiki.getDocument($item))
      #set($discard = $blogEntryDoc.getObject(${blogPostClassname}).getProperty('category').value.remove($category))
      #set($discard = $blogEntryDoc.getObject(${blogPostClassname}).getProperty('category').value.add($newCategoryDoc.fullName))
      $blogEntryDoc.save($services.localization.render('xe.blog.manageCategories.comment.updatedRenamedCategory'), true)
    #end
  #end
  #if ($!{services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
    $categoryDoc.getObject('Blog.CategoryClass').set('name', $newCategoryName)
    $categoryDoc.save($services.localization.render('xe.blog.manageCategories.comment.updatedCategory'), true)
    $categoryDoc.rename($newCategoryName)
  #end
#end
{{/velocity}}</content>
</xwikidoc>