<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>RISCOSSPlatformRiskAnalysisManagerCode</web>
  <name>EvaluateGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1430839815000</creationDate>
  <parent>xwiki:XWiki.WebHome</parent>
  <author>xwiki:XWiki.superadmin</author>
  <contentAuthor>xwiki:XWiki.superadmin</contentAuthor>
  <date>1442963880000</date>
  <contentUpdateDate>1442963770000</contentUpdateDate>
  <version>1.218</version>
  <title/>
  <comment>Imported from XAR</comment>
  <minorEdit>true</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>/* -*- Mode:Java */&#xd;
import org.json.JSONObject;&#xd;
import org.json.JSONArray;&#xd;
import org.xwiki.environment.Environment;&#xd;
import java.io.File;&#xd;
import java.io.FileOutputStream;&#xd;
import org.apache.commons.io.IOUtils;&#xd;
import org.apache.http.client.methods.CloseableHttpResponse;&#xd;
import org.apache.http.client.methods.HttpGet;&#xd;
import org.apache.http.impl.client.CloseableHttpClient;&#xd;
import org.apache.http.impl.client.HttpClientBuilder;&#xd;
import org.apache.commons.codec.net.URLCodec;&#xd;
&#xd;
public class EvaluateAPI {&#xd;
&#xd;
public JSONObject parseJSON(String stdout)&#xd;
{&#xd;
    return new JSONObject(stdout);&#xd;
}&#xd;
&#xd;
private JSONObject runEvaluator(Object services,&#xd;
                                String cmd,&#xd;
                                String riskModels,&#xd;
                                JSONObject inputs,&#xd;
                                String[] evaluator)&#xd;
{&#xd;
    String command = evaluator[1] + " " + cmd + " " + riskModels;&#xd;
    if (inputs != null) { command += " -"; }&#xd;
    String workDir = evaluator[0];&#xd;
    JSONObject out =&#xd;
        new JSONObject(services.commandRunner.run(command, inputs.toString(), 120000, workDir));&#xd;
    out.put("command", command);&#xd;
    out.put("workDir", workDir);&#xd;
&#xd;
    String stdout = out.getString("stdout");&#xd;
    String BEGIN = "-----BEGIN ANALYSIS OUTPUT-----";&#xd;
    String END = "-----END ANALYSIS OUTPUT-----";&#xd;
    if (stdout != null) {&#xd;
        int beginIndex = stdout.indexOf(BEGIN);&#xd;
        int endIndex = stdout.indexOf(END);&#xd;
        if (beginIndex > -1 &amp;&amp; endIndex > -1) {&#xd;
            String output = stdout.substring(beginIndex + BEGIN.length(), endIndex);&#xd;
            out.put("output", new JSONObject(output));&#xd;
        }&#xd;
    }&#xd;
    return out;&#xd;
}&#xd;
&#xd;
public JSONObject runInterpreter(Object services,&#xd;
                                 Object xcontext,&#xd;
                                 Object xwiki,&#xd;
                                 String cmd,&#xd;
                                 Object sessionDoc,&#xd;
                                 JSONObject inputs)&#xd;
{&#xd;
    def INTERPRETER_ASSOC = "RISCOSSPlatformCode.DataInterpreterAssociationClass";&#xd;
    def INTERPRETER_CLS = "RISCOSSPlatformCode.DataInterpreterClass";&#xd;
&#xd;
    def riskEvalObj = sessionDoc.getObject(RISK_EVAL_CLS);&#xd;
    def riskConfDoc = xwiki.getDocument(riskEvalObj.getProperty("riskConfiguration").getValue());&#xd;
    def io = riskConfDoc.getObject(INTERPRETER_ASSOC);&#xd;
    if (io == null) { return null; }&#xd;
    def interpreterName = io.getProperty("interpreterName").getValue();&#xd;
    def interpreterDoc = xwiki.getDocument(interpreterName);&#xd;
    if (interpreterDoc.isNew()) { return null; }&#xd;
    def interpreterObj = interpreterDoc.getObject(INTERPRETER_CLS);&#xd;
&#xd;
    def command = interpreterObj.getProperty("command").getValue() + " " + cmd + " -";&#xd;
    File workDir = getAttachDir(services, xcontext, interpreterDoc);&#xd;
&#xd;
    JSONObject out = new JSONObject(&#xd;
        services.commandRunner.run(command, inputs.toString(), 120000, ""+workDir)&#xd;
    );&#xd;
    out.put("command", command);&#xd;
    out.put("workDir", ""+workDir);&#xd;
&#xd;
    String stdout = out.getString("stdout");&#xd;
    String BEGIN = "-----BEGIN ANALYSIS OUTPUT-----";&#xd;
    String END = "-----END ANALYSIS OUTPUT-----";&#xd;
    if (stdout != null) {&#xd;
        int beginIndex = stdout.indexOf(BEGIN);&#xd;
        int endIndex = stdout.indexOf(END);&#xd;
        if (beginIndex > -1 &amp;&amp; endIndex > -1) {&#xd;
            String outputStr = stdout.substring(beginIndex + BEGIN.length(), endIndex);&#xd;
            def output = new JSONObject(outputStr);&#xd;
            out.put("output", output);&#xd;
        }&#xd;
    }&#xd;
    return out;&#xd;
}&#xd;
&#xd;
private Object getServices(Object xcontext)&#xd;
{&#xd;
    def vcontext = xcontext.get("vcontext");&#xd;
    return vcontext.get("services");&#xd;
}&#xd;
&#xd;
private Object getXWiki(Object xcontext)&#xd;
{&#xd;
    def vcontext = xcontext.get("vcontext");&#xd;
    return vcontext.get("xwiki");&#xd;
}&#xd;
&#xd;
public JSONObject interpret(Object xcontext, Object sessionDoc, JSONObject riskData)&#xd;
{&#xd;
    JSONObject inputs = runInterpreter(getServices(xcontext),&#xd;
                                       xcontext,&#xd;
                                       getXWiki(xcontext),&#xd;
                                       "evaluate",&#xd;
                                       sessionDoc,&#xd;
                                       riskData);&#xd;
    if (inputs == null) {&#xd;
        inputs = new JSONObject();&#xd;
        inputs.put("output", riskData);&#xd;
    }&#xd;
    return inputs;&#xd;
}&#xd;
&#xd;
public JSONObject evaluate(Object xcontext, Object sessionDoc, JSONObject interpretedRiskData)&#xd;
{&#xd;
    //JSONObject output = interpretedRiskData.getJSONObject("output");&#xd;
    // Code modified by mohamed to fix the issue, need to Caleb's check.&#xd;
    JSONObject output;&#xd;
    if(interpretedRiskData.has("output")){&#xd;
       if(interpretedRiskData.getJSONObject("output").has("output")){&#xd;
          output = interpretedRiskData.getJSONObject("output").getJSONObject("output"); &#xd;
       }&#xd;
       else&#xd;
       {&#xd;
          output = interpretedRiskData.getJSONObject("output");&#xd;
       }&#xd;
    }&#xd;
    String riskModels = riskModelsForSession(xcontext, sessionDoc);&#xd;
    String[] evaluator = evaluatorForSession(xcontext, sessionDoc);&#xd;
    return runEvaluator(getServices(xcontext), "evaluate", riskModels, output, evaluator);&#xd;
}&#xd;
&#xd;
public JSONObject getInputs(Object xcontext, Object sessionDoc)&#xd;
{&#xd;
    JSONObject empty = new JSONObject();&#xd;
    JSONObject inputs = runInterpreter(getServices(xcontext),&#xd;
                                       xcontext,&#xd;
                                       getXWiki(xcontext),&#xd;
                                       "getInputs",&#xd;
                                       sessionDoc,&#xd;
                                       empty);&#xd;
    if (inputs != null) {&#xd;
        return inputs;&#xd;
    }&#xd;
    String riskModels = riskModelsForSession(xcontext, sessionDoc);&#xd;
    String[] evaluator = evaluatorForSession(xcontext, sessionDoc);&#xd;
    return runEvaluator(getServices(xcontext), "getInputs", riskModels, inputs, evaluator);&#xd;
}&#xd;
&#xd;
private String urlEncode(String toEncode)&#xd;
{&#xd;
    return URLEncoder.encode(toEncode, "UTF-8").replaceAll("\\+", "%20");&#xd;
}&#xd;
&#xd;
public JSONObject getRiskData2(Object services,&#xd;
                               JSONObject inputs,&#xd;
                               String riskDataRepositoryURI,&#xd;
                               String targetName,&#xd;
                               String useCaseName)&#xd;
{&#xd;
    JSONArray errors = new JSONArray();&#xd;
    JSONArray warnings = new JSONArray();&#xd;
&#xd;
    def inputOutput = inputs.getJSONObject("output");&#xd;
    def inputResult = inputOutput.getJSONObject("result");&#xd;
&#xd;
    try {&#xd;
        CloseableHttpClient client = HttpClientBuilder.create().build();&#xd;
        for (String fullName : JSONObject.getNames(inputResult)) {&#xd;
            String entity = targetName;&#xd;
            String name = fullName;&#xd;
            if (name.indexOf("OSSComp:") == 0) {&#xd;
                name = name.substring(("OSSComp:").length());&#xd;
            } else if (name.indexOf("UseCase:") == 0) {&#xd;
                name = name.substring(("UseCase:").length());&#xd;
                entity = useCaseName;&#xd;
                if (useCaseName == null || "".equals(useCaseName)) {&#xd;
                    errors.put("Risk model requires data point: " + name +&#xd;
                        " which is only available with a configured UseCase");&#xd;
                    continue;&#xd;
                }&#xd;
            }&#xd;
            JSONObject output = inputResult.optJSONObject(fullName);&#xd;
            if (output == null) { continue; }&#xd;
            String rdrUrl = String.format("%s/%s?id=%s&amp;limit=1",&#xd;
                                          riskDataRepositoryURI,&#xd;
                                          urlEncode(entity),&#xd;
                                          urlEncode(name));&#xd;
            output.put("rdrUrl", rdrUrl);&#xd;
            HttpGet get = new HttpGet(rdrUrl);&#xd;
            CloseableHttpResponse response = client.execute(get);&#xd;
&#xd;
            if (response.getStatusLine().getStatusCode() != 200) {&#xd;
                errors.put(String.format("Error retrieving risk data for %s: %s", name,&#xd;
                        response.getStatusLine().getReasonPhrase()));&#xd;
            } else {&#xd;
                JSONObject o = new JSONObject(IOUtils.toString(response.getEntity().getContent()));&#xd;
                JSONArray riskDataArray = o.getJSONArray("results");&#xd;
                if (riskDataArray.length() != 0) {&#xd;
                    JSONObject riskData = riskDataArray.getJSONObject(0);&#xd;
                    output.put("value", riskData.get("value"));&#xd;
                } else {&#xd;
                    warnings.put("No data available for data point " + name);&#xd;
                }&#xd;
            }&#xd;
            inputResult.put(fullName, output);&#xd;
        }&#xd;
    } catch (IOException e) {&#xd;
        errors.put(String.format("Error fetching risk data from %s", riskDataRepositoryURI), e);&#xd;
    }&#xd;
&#xd;
    JSONObject out = new JSONObject();&#xd;
    out.put("result", inputResult);&#xd;
    out.put("errors", errors);&#xd;
    out.put("warnings", warnings);&#xd;
    JSONObject finalOut = new JSONObject();&#xd;
    finalOut.put("output", out);&#xd;
    return finalOut;&#xd;
}&#xd;
&#xd;
public JSONObject getRiskData(Object services,&#xd;
                              JSONObject inputs,&#xd;
                              String riskDataRepositoryURI,&#xd;
                              String targetName)&#xd;
{&#xd;
    JSONArray errors = new JSONArray();&#xd;
    JSONArray warnings = new JSONArray();&#xd;
&#xd;
    def inputOutput = inputs.getJSONObject("output");&#xd;
    def inputResult = inputOutput.getJSONObject("result");&#xd;
&#xd;
    targetName = targetName.toLowerCase();&#xd;
&#xd;
    try {&#xd;
        CloseableHttpClient client = HttpClientBuilder.create().build();&#xd;
        for (String name : JSONObject.getNames(inputResult)) {&#xd;
            JSONObject output = inputResult.optJSONObject(name);&#xd;
            if (output == null) { continue; }&#xd;
            HttpGet get =&#xd;
                    new HttpGet(&#xd;
                            String.format("%s/%s?id=%s&amp;limit=1",&#xd;
                                          riskDataRepositoryURI,&#xd;
                                          urlEncode(targetName),&#xd;
                                          urlEncode(name)));&#xd;
            CloseableHttpResponse response = client.execute(get);&#xd;
&#xd;
            if (response.getStatusLine().getStatusCode() != 200) {&#xd;
                errors.put(String.format("Error retrieving risk data for %s: %s", name,&#xd;
                        response.getStatusLine().getReasonPhrase()));&#xd;
            } else {&#xd;
                JSONObject o = new JSONObject(IOUtils.toString(response.getEntity().getContent()));&#xd;
                JSONArray riskDataArray = o.getJSONArray("results");&#xd;
                if (riskDataArray.length() != 0) {&#xd;
                    JSONObject riskData = riskDataArray.getJSONObject(0);&#xd;
                    output.put("value", riskData.get("value"));&#xd;
                }&#xd;
            }&#xd;
            inputResult.put(name, output);&#xd;
        }&#xd;
    } catch (IOException e) {&#xd;
        errors.put(String.format("Error fetching risk data from %s", riskDataRepositoryURI), e);&#xd;
    }&#xd;
&#xd;
    JSONObject out = new JSONObject();&#xd;
    out.put("result", inputResult);&#xd;
    out.put("errors", errors);&#xd;
    out.put("warnings", warnings);&#xd;
    JSONObject finalOut = new JSONObject();&#xd;
    finalOut.put("output", out);&#xd;
    return finalOut;&#xd;
}&#xd;
&#xd;
private String RISK_EVAL_CLS = "RISCOSSPlatformRiskAnalysisManagerCode.RiskEvaluationClass";&#xd;
private String RISK_EVALUATOR_CLS = "RISCOSSPlatformCode.AnalyserClass";&#xd;
&#xd;
public String targetForSession(Object sessionDoc)&#xd;
{&#xd;
    def riskSessionObj = sessionDoc.getObject(RISK_EVAL_CLS);&#xd;
    return riskSessionObj.getProperty("entity").getValue();&#xd;
}&#xd;
&#xd;
public String useCaseForSession(Object sessionDoc)&#xd;
{&#xd;
    def riskSessionObj = sessionDoc.getObject(RISK_EVAL_CLS);&#xd;
    def prop = riskSessionObj.getProperty("useCase");&#xd;
    return prop ? prop.getValue() : "";&#xd;
}&#xd;
&#xd;
// Copied from DataCollectorGroovy, keep in sync, TODO: fix&#xd;
public File getAttachFile(Object services, Object xcontext, Object attachment)&#xd;
{&#xd;
    Object env = services.component.getInstance(Environment.class);&#xd;
    File tempDir = env.getTemporaryDirectory();&#xd;
    String encodedDocName = (new URLCodec()).encode(attachment.getDocument().getFullName());&#xd;
    File dir = new File(tempDir, "riscoss-" + encodedDocName);&#xd;
    String encodedFileName = (new URLCodec()).encode(attachment.getFilename());&#xd;
    File file = new File(dir, encodedFileName);&#xd;
    if (!dir.isDirectory()) {&#xd;
        if (!dir.mkdir()) { throw new RuntimeException("failed to make directory"); }&#xd;
    }&#xd;
    if (file.exists() &amp;&amp; file.length() != attachment.getFilesize()) {&#xd;
        file.delete();&#xd;
    }&#xd;
    if (!file.exists()) {&#xd;
        def input = attachment.getAttachment().getContentInputStream(xcontext.getContext());&#xd;
        Object output = new FileOutputStream(file);&#xd;
        IOUtils.copy(input, output);&#xd;
        IOUtils.closeQuietly(input);&#xd;
        IOUtils.closeQuietly(output);&#xd;
    }&#xd;
    if (!file.exists()) { throw new RuntimeException("[" + file + "] nonexistant"); }&#xd;
    if (file.length() != attachment.getFilesize()) {&#xd;
        throw new RuntimeException("[" + file + "] wrong length: expected: [" +&#xd;
            attachment.getFilesize() + "] got: [" + file.length() + "]");&#xd;
    }&#xd;
    return file;&#xd;
}&#xd;
// Copied from DataCollectorGroovy, keep in sync, TODO: fix&#xd;
public File getAttachDir(Object services, Object xcontext, Object collectorDoc)&#xd;
{&#xd;
    File file = new File(System.getProperty("user.dir"));&#xd;
    for (def att : collectorDoc.getAttachmentList()) {&#xd;
        file = getAttachFile(services, xcontext, att).getParentFile()&#xd;
    }&#xd;
    return file;&#xd;
}&#xd;
&#xd;
public String[] evaluatorForSession(Object xcontext, Object sessionDoc)&#xd;
{&#xd;
    def vcontext = xcontext.get("vcontext");&#xd;
    def xwiki = vcontext.get("xwiki");&#xd;
    def services = vcontext.get("services");&#xd;
&#xd;
    def RISK_MODEL_PTR_CLS = "RISCOSSPlatformRiskConfigurationManagerCode.RiskModelClass";&#xd;
    def RISK_MODEL_CLS = "RISCOSSPlatformModelManagerCode.RiskModelClass";&#xd;
    def ENTITY_CLS = "RISCOSSPlatformLayerManagerCode.EntityClass";&#xd;
&#xd;
    def riskEvalObj = sessionDoc.getObject(RISK_EVAL_CLS);&#xd;
    def riskConfDocName = riskEvalObj.getProperty("riskConfiguration").getValue();&#xd;
    def riskConfDoc = xwiki.getDocument(riskConfDocName);&#xd;
    def targetDocName = targetForSession(sessionDoc);&#xd;
    def targetDoc = xwiki.getDocument(targetDocName);&#xd;
    def layer = targetDoc.getObject(ENTITY_CLS).getProperty("layer").getValue();&#xd;
&#xd;
    String evaluator = null;&#xd;
    def models = riskConfDoc.getObjects(RISK_MODEL_PTR_CLS, "layer", layer);&#xd;
    def hasModels = false;&#xd;
    for (Object riskModel : models) {&#xd;
        hasModels = true;&#xd;
        def riskModelDoc = xwiki.getDocument(riskModel.getProperty("riskModel").getValue());&#xd;
        if (riskModelDoc.isNew()) { throw new RuntimeException("missing model " + riskModelDoc); }&#xd;
        def e = riskModelDoc.getObject(RISK_MODEL_CLS).getProperty("analyser").getValue();&#xd;
        if (evaluator != null &amp;&amp; !evaluator.equals(e)) {&#xd;
            throw new RuntimeException("All models for a configuration must use one evaluator");&#xd;
        }&#xd;
        evaluator = e;&#xd;
    }&#xd;
    if (!hasModels) { throw new RuntimeException("No models!"); }&#xd;
    if (evaluator == null) { throw new RuntimeException("No evaluator found. Models:" + models); }&#xd;
    def evalDoc = xwiki.getDocument(evaluator);&#xd;
    def workDir = getAttachDir(services, xcontext, evalDoc);&#xd;
    def command = evalDoc.getObject(RISK_EVALUATOR_CLS).getProperty("command").getValue();&#xd;
    String[] out = new String[2];&#xd;
    out[0] = workDir;&#xd;
    out[1] = command;&#xd;
    return out;&#xd;
}&#xd;
&#xd;
public String riskModelsForSession(Object xcontext, Object sessionDoc)&#xd;
{&#xd;
    def vcontext = xcontext.get("vcontext");&#xd;
    def xwiki = vcontext.get("xwiki");&#xd;
    def services = vcontext.get("services");&#xd;
&#xd;
    def RISK_MODEL_PTR_CLS = "RISCOSSPlatformRiskConfigurationManagerCode.RiskModelClass";&#xd;
    def RISK_MODEL_CLS = "RISCOSSPlatformModelManagerCode.RiskModelClass";&#xd;
    def ENTITY_CLS = "RISCOSSPlatformLayerManagerCode.EntityClass";&#xd;
&#xd;
    def riskEvalObj = sessionDoc.getObject(RISK_EVAL_CLS);&#xd;
    def riskConfDocName = riskEvalObj.getProperty("riskConfiguration").getValue();&#xd;
    def riskConfDoc = xwiki.getDocument(riskConfDocName);&#xd;
    def targetDocName = targetForSession(sessionDoc);&#xd;
    def targetDoc = xwiki.getDocument(targetDocName);&#xd;
    def layer = targetDoc.getObject(ENTITY_CLS).getProperty("layer").getValue();&#xd;
&#xd;
    String riskModels = "";&#xd;
    for (def riskModel : riskConfDoc.getObjects(RISK_MODEL_PTR_CLS, "layer", layer)) {&#xd;
        def riskModelDoc = xwiki.getDocument(riskModel.getProperty("riskModel").getValue());&#xd;
        def attachName = riskModelDoc.getObject(RISK_MODEL_CLS).getProperty("riskModelData").getValue();&#xd;
        def riskModelData = getAttachFile(services, xcontext, riskModelDoc.getAttachment(attachName));&#xd;
        riskModels = riskModels + "," + riskModelData;&#xd;
    }&#xd;
    return ("".equals(riskModels)) ? "" : riskModels.substring(1);&#xd;
}&#xd;
&#xd;
public Object getSessionDoc(Object xwiki, String targetName, String riskConfig, boolean create)&#xd;
{&#xd;
    if (riskConfig.indexOf('.') == -1) {&#xd;
        riskConfig = "RISCOSSPlatformRiskConfigurations." + riskConfig;&#xd;
    }&#xd;
    if (targetName.indexOf('.') == -1) {&#xd;
        riskConfig = "RISCOSSPlatformEntities." + targetName;&#xd;
    }&#xd;
&#xd;
    def riskConfDoc = xwiki.getDocument(riskConfig);&#xd;
    if (riskConfDoc.isNew()) { return "ERROR_riskConfig_nonexistant"; }&#xd;
    def targetDoc = xwiki.getDocument(targetName);&#xd;
    if (targetDoc.isNew()) { return "ERROR_targetName_nonexistant"; }&#xd;
&#xd;
    def sessionDoc = xwiki.getDocument("RISCOSSPlatformRiskAnalysisSessions",&#xd;
        targetName.substring(targetName.lastIndexOf('.')+1) +&#xd;
        "_evaluatedWith_" +&#xd;
        riskConfig.substring(riskConfig.lastIndexOf('.')+1));&#xd;
    if (sessionDoc.isNew()) {&#xd;
        if (!create) { return "no_such_session"; }&#xd;
        sessionDoc.setTitle("Analysis of " + targetDoc.getTitle() + " using " +&#xd;
            riskConfDoc.getTitle() + " Risk Configuration");&#xd;
        def riskEvalObj = sessionDoc.getObject(RISK_EVAL_CLS, true);&#xd;
        riskEvalObj.set("riskConfiguration", riskConfDoc.getFullName());&#xd;
        riskEvalObj.set("entity", targetDoc.getFullName());&#xd;
        sessionDoc.saveWithProgrammingRights("Created new risk analysis session");&#xd;
    }&#xd;
    return sessionDoc;&#xd;
}&#xd;
&#xd;
public def escapeXWikiDocWithDots(docFullName, space){&#xd;
   def rep = docFullName;&#xd;
   def docName = docFullName.substring(space.size());&#xd;
   rep = space + docName.replace(".","\\.");&#xd;
   return rep;&#xd;
}&#xd;
&#xd;
public Object getSessionDoc2(Object xwiki,&#xd;
                             Object xcontext,&#xd;
                             String targetName,&#xd;
                             String useCaseName,&#xd;
                             String riskConfig,&#xd;
                             boolean create)&#xd;
{&#xd;
    def userName = xwiki.getDocument(xcontext.user).name;&#xd;
    if (riskConfig.indexOf('.') == -1) {&#xd;
        riskConfig = "RISCOSSPlatformRiskConfigurations." + riskConfig;&#xd;
    }&#xd;
    if (targetName.indexOf('.') == -1) {&#xd;
        //riskConfig = "RISCOSSPlatformEntities." + targetName;&#xd;
        riskConfig = "RISCOSSPlatformEntities" + userName + "." + targetName;&#xd;
    }&#xd;
    if (useCaseName != null &amp;&amp; useCaseName.indexOf('.') == -1) {&#xd;
        useCaseName = "RISCOSSPlatformEntities" + userName + "." + useCaseName;&#xd;
    }&#xd;
&#xd;
    def riskConfDoc = xwiki.getDocument(riskConfig);&#xd;
    if (riskConfDoc.isNew()) { return "ERROR_riskConfig_nonexistant"; }&#xd;
    def escapedTargetDocFullName = escapeXWikiDocWithDots(targetName, "RISCOSSPlatformEntities" + userName + ".");&#xd;
    //def targetDoc = xwiki.getDocument(targetName);&#xd;
    def targetDoc = xwiki.getDocument(escapedTargetDocFullName);&#xd;
    if (targetDoc.isNew()) { return "ERROR_targetName_nonexistant"; }&#xd;
    def useCaseDoc = null;&#xd;
    if (useCaseName != null) {&#xd;
        useCaseDoc = xwiki.getDocument(useCaseName);&#xd;
        if (useCaseDoc.isNew()) { return "ERROR_useCaseName_nonexistant"; }&#xd;
    }&#xd;
&#xd;
    //String docName = targetName.substring(targetName.lastIndexOf('.')+1);&#xd;
    def entitySpace = "RISCOSSPlatformEntities" + userName + ".";&#xd;
    String docName = "";&#xd;
    if(targetName.indexOf(entitySpace) != -1){&#xd;
       docName = targetName.substring(entitySpace.length());//(24 == entitySpace.length)&#xd;
    }&#xd;
    else&#xd;
    {&#xd;
       docName = targetName.substring(targetName.lastIndexOf('.')+1);&#xd;
    }&#xd;
    &#xd;
    if (useCaseName != null) {&#xd;
        docName += "_for_" + useCaseName.substring(useCaseName.lastIndexOf('.')+1);&#xd;
    }&#xd;
    docName += "_evaluatedWith_" +&#xd;
        riskConfig.substring(riskConfig.lastIndexOf('.')+1);&#xd;
&#xd;
    def sessionDoc = xwiki.getDocument("RISCOSSPlatformRiskAnalysisSessions" + userName, docName);&#xd;
    // Manage entities that have dots(.) in their name&#xd;
    if(docName.indexOf('.') != -1){&#xd;
       sessionDoc = xwiki.getDocument("RISCOSSPlatformRiskAnalysisSessions" + userName + "." + docName.replace(".","\\."));&#xd;
    }&#xd;
    if (sessionDoc.isNew()) {&#xd;
        if (!create) { return "no_such_session"; }&#xd;
        sessionDoc.setTitle("Analysis of " + targetDoc.getTitle() + " using " +&#xd;
            riskConfDoc.getTitle() + " Risk Configuration");&#xd;
        def riskEvalObj = sessionDoc.getObject(RISK_EVAL_CLS, true);&#xd;
        riskEvalObj.set("riskConfiguration", riskConfDoc.getFullName());&#xd;
        //riskEvalObj.set("entity", targetDoc.getFullName());&#xd;
        riskEvalObj.set("entity", escapedTargetDocFullName);&#xd;
        if (useCaseDoc != null) {&#xd;
            riskEvalObj.set("useCase", useCaseDoc.getFullName());&#xd;
        }&#xd;
        sessionDoc.saveWithProgrammingRights("Created new risk analysis session");&#xd;
    }&#xd;
    return sessionDoc;&#xd;
}&#xd;
&#xd;
public def storeResults(Object sessionDoc,&#xd;
                           JSONObject results,&#xd;
                           JSONObject inputs,&#xd;
                           JSONObject raw)&#xd;
{&#xd;
    long now = System.currentTimeMillis();&#xd;
    if (sessionDoc.isNew()) { throw new RuntimeException(); }&#xd;
    // Calculate the analysis score&#xd;
    def score = 1;&#xd;
    for(key in results.keys()){ &#xd;
       def riskScore = results.getJSONObject(key).getJSONObject("value").get("positive");&#xd;
       score = score * riskScore;&#xd;
    }&#xd;
    def riskEvalObj = sessionDoc.getObject(RISK_EVAL_CLS, false);&#xd;
    riskEvalObj.set("inputData", inputs ? inputs.toString() : "");&#xd;
    riskEvalObj.set("result", results ? results.toString() : "");&#xd;
    riskEvalObj.set("rawOutput", raw ? raw.toString() : "");&#xd;
    riskEvalObj.set("timeLastRun", now);&#xd;
    riskEvalObj.set("score", score);&#xd;
    sessionDoc.saveWithProgrammingRights("Saved results to risk analysis session");&#xd;
    return "ok";&#xd;
}&#xd;
&#xd;
public String getRDRPath(Object xwiki)&#xd;
{&#xd;
    def config = xwiki.getDocument("RISCOSSPlatformCode.RISCOSSConfiguration");&#xd;
    def configObj = config.getObject("RISCOSSPlatformCode.RISCOSSConfiguration");&#xd;
    return configObj.getProperty("rdr").getValue();&#xd;
}&#xd;
&#xd;
}&#xd;
</content>
</xwikidoc>