<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>WikiManager</web>
  <name>WikisLiveTableResults</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1429197414000</creationDate>
  <parent>WikiManager.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1293832800000</date>
  <contentUpdateDate>1293832800000</contentUpdateDate>
  <version>1.1</version>
  <title>$services.localization.render('platform.livetable.results')</title>
  <comment>Imported from XAR</comment>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="WikiManager.WikisLiveTableResultsMacros" /}}

{{velocity wiki="false"}}
#set($from =  "")
#set($extra = "")
#set($params = [])
## Restrict to the list of wiki I can see
#set ($extra = "${extra} and doc.name IN (")
#set ($separator = "")
#foreach ($wiki in $services.wiki.getAll())
  ## XWiki.XWikiComments is a mandatory document that it must exists and we should have acces to it
  #set ($testPageReference = $services.model.createDocumentReference($wiki.id, 'XWiki', 'XWikiComments'))
  #if ($xwiki.hasAccessLevel('view', $xcontext.userReference, $testPageReference) || ($services.wiki.user.getUserScope($wiki.id)!='LOCAL_ONLY' &amp;&amp; $services.wiki.user.getMembershipType($wiki.id) != 'INVITE') || $services.wiki.user.hasPendingInvitation($xcontext.userReference, $wiki.id))
    #set ($extra = "${extra}${separator}'XWikiServer${stringtool.capitalize($wiki.id)}'")
    #set ($separator = ",")
  #end
#end
#set ($extra = "${extra})")
## Restrict to templates only
#if("$!request.onlyTemplates" == '1')
  #set($from = "${from}, BaseObject objTemplate, IntegerProperty propTemplate")
  #set($extra = "${extra} AND doc.fullName = objTemplate.name AND objTemplate.className='WikiManager.WikiTemplateClass' AND objTemplate.id = propTemplate.id AND propTemplate.name='iswikitemplate' AND propTemplate.value='1'")
#end
#set($columns = [])
#foreach($c in $request.collist.split(","))
  #if($c != 'membershipType')
    #set($discard = $columns.add($c))
  #end
#end
#gridresultwithfilter("$!request.classname" $columns "${from}" "${extra}" $params)
{{/velocity}}</content>
</xwikidoc>